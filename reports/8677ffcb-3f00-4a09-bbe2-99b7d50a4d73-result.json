{"name": "test_db_after_submit", "status": "broken", "statusDetails": {"message": "pymysql.err.ProgrammingError: (1146, \"Table 'medical_db.blood_records' doesn't exist\")", "trace": "def test_db_after_submit():\n        # 先上报数据\n        client = HttpClient()\n        client.post(\"/api/bloodpressure\", {\"systolic\": 180, \"diastolic\": 110})\n    \n        # 检查数据库\n        db = DBHandler()\n>       result = db.query(\"SELECT * FROM blood_records WHERE systolic > 140\")\n\ntest_cases\\test_bloodpressure.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils\\db_handler.py:11: in query\n    cursor.execute(sql)\nvenv\\lib\\site-packages\\pymysql\\cursors.py:153: in execute\n    result = self._query(query)\nvenv\\lib\\site-packages\\pymysql\\cursors.py:322: in _query\n    conn.query(q)\nvenv\\lib\\site-packages\\pymysql\\connections.py:563: in query\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\nvenv\\lib\\site-packages\\pymysql\\connections.py:825: in _read_query_result\n    result.read()\nvenv\\lib\\site-packages\\pymysql\\connections.py:1199: in read\n    first_packet = self.connection._read_packet()\nvenv\\lib\\site-packages\\pymysql\\connections.py:775: in _read_packet\n    packet.raise_for_error()\nvenv\\lib\\site-packages\\pymysql\\protocol.py:219: in raise_for_error\n    err.raise_mysql_exception(self._data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata = b\"\\xffz\\x04#42S02Table 'medical_db.blood_records' doesn't exist\"\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack(\"<h\", data[1:3])[0]\n        # https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_basic_err_packet.html\n        # Error packet has optional sqlstate that is 5 bytes and starts with '#'.\n        if data[3] == 0x23:  # '#'\n            # sqlstate = data[4:9].decode()\n            # TODO: Append (sqlstate) in the error message. This will be come in next minor release.\n            errval = data[9:].decode(\"utf-8\", \"replace\")\n        else:\n            errval = data[3:].decode(\"utf-8\", \"replace\")\n        errorclass = error_map.get(errno)\n        if errorclass is None:\n            errorclass = InternalError if errno < 1000 else OperationalError\n>       raise errorclass(errno, errval)\nE       pymysql.err.ProgrammingError: (1146, \"Table 'medical_db.blood_records' doesn't exist\")\n\nvenv\\lib\\site-packages\\pymysql\\err.py:150: ProgrammingError"}, "start": 1744275073611, "stop": 1744275073646, "uuid": "a0f98f69-47b3-4b2b-b0bb-05534f1e238c", "historyId": "492203d9878f6627557ab1f43dd7b343", "testCaseId": "492203d9878f6627557ab1f43dd7b343", "fullName": "test_cases.test_bloodpressure#test_db_after_submit", "labels": [{"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_bloodpressure"}, {"name": "host", "value": "PC-20220908HPOQ"}, {"name": "thread", "value": "20736-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_bloodpressure"}]}