{"name": "test_db_after_submit", "status": "broken", "statusDetails": {"message": "pymysql.err.OperationalError: (1049, \"Unknown database 'medical_db'\")", "trace": "def test_db_after_submit():\n        # 先上报数据\n        client = HttpClient()\n        client.post(\"/api/bloodpressure\", {\"systolic\": 180, \"diastolic\": 110})\n    \n        # 检查数据库\n>       db = DBHandler()\n\ntest_cases\\test_bloodpressure.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils\\db_handler.py:6: in __init__\n    self.conn = pymysql.connect(**DB_CONFIG)\nvenv\\lib\\site-packages\\pymysql\\connections.py:361: in __init__\n    self.connect()\nvenv\\lib\\site-packages\\pymysql\\connections.py:669: in connect\n    self._request_authentication()\nvenv\\lib\\site-packages\\pymysql\\connections.py:979: in _request_authentication\n    auth_packet = _auth.caching_sha2_password_auth(self, auth_packet)\nvenv\\lib\\site-packages\\pymysql\\_auth.py:241: in caching_sha2_password_auth\n    pkt = conn._read_packet()\nvenv\\lib\\site-packages\\pymysql\\connections.py:775: in _read_packet\n    packet.raise_for_error()\nvenv\\lib\\site-packages\\pymysql\\protocol.py:219: in raise_for_error\n    err.raise_mysql_exception(self._data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata = b\"\\xff\\x19\\x04#42000Unknown database 'medical_db'\"\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack(\"<h\", data[1:3])[0]\n        # https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_basic_err_packet.html\n        # Error packet has optional sqlstate that is 5 bytes and starts with '#'.\n        if data[3] == 0x23:  # '#'\n            # sqlstate = data[4:9].decode()\n            # TODO: Append (sqlstate) in the error message. This will be come in next minor release.\n            errval = data[9:].decode(\"utf-8\", \"replace\")\n        else:\n            errval = data[3:].decode(\"utf-8\", \"replace\")\n        errorclass = error_map.get(errno)\n        if errorclass is None:\n            errorclass = InternalError if errno < 1000 else OperationalError\n>       raise errorclass(errno, errval)\nE       pymysql.err.OperationalError: (1049, \"Unknown database 'medical_db'\")\n\nvenv\\lib\\site-packages\\pymysql\\err.py:150: OperationalError"}, "start": 1744274712006, "stop": 1744274712040, "uuid": "fa7967aa-d01e-4171-8877-dd282e143a8e", "historyId": "492203d9878f6627557ab1f43dd7b343", "testCaseId": "492203d9878f6627557ab1f43dd7b343", "fullName": "test_cases.test_bloodpressure#test_db_after_submit", "labels": [{"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_bloodpressure"}, {"name": "host", "value": "PC-20220908HPOQ"}, {"name": "thread", "value": "14964-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_bloodpressure"}]}